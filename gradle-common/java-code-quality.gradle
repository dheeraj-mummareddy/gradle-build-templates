def sonar_organization_key = project.properties['sonarOrganizationKey'] ?: ""
def sonar_host_url = project.properties['sonarHostUrl'] ?: "https://sonarcloud.io/"
def sonar_organization = project.properties['sonarOrganization'] ?: ""
def check_style_version = project.properties['checkStyleVersion'] ?: "8.17"
def pmd_version = project.properties['pmdVersion'] ?: "6.21.0"
def jacoco_version = project.properties['jacocoVersion'] ?: "0.8.6"
def code_quality_resources = project.properties['codeQualityResources'] ?: "https://raw.githubusercontent.com/dheeraj-mummareddy/gradle-build-templates/master/gradle-common/resources/code-quality"
//local testing
//def code_quality_resources = project.properties['codeQualityResources'] ?: "../../gradle-common/resources/code-quality"

buildscript {
    def spotbugs_plugin_version = project.properties['spotbugsPluginVersion'] ?: "1.6.9"

    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:${spotbugs_plugin_version}"
    }
}

apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'jacoco'

// Sonar Cloud Configuration
sonarqube {
    properties {
        property 'sonar.host.url', "${sonar_host_url}"
        property 'sonar.projectKey', "${sonar_organization}_${rootProject.name}"
        property 'sonar.organization', "${sonar_organization_key}"
        property 'sonar.java.spotbugs.reportPaths', 'build/reports/spotbugs/main.xml'
        property 'sonar.java.pmd.reportPaths', 'build/reports/pmd/main.xml'
        property 'sonar.java.checkstyle.reportPaths', 'build/reports/checkstyle/main.xml'
        properties['sonar.tests'] += 'src/integration-test'
        properties['sonar.junit.reportPaths'] += 'build/test-results/integrationTest'
    }
}
// Run as a totally independent task.
project.tasks['sonarqube'].dependsOn.clear()

// CheckStyle Configuration
checkstyle {
    ignoreFailures = false
    config = resources.text.fromUri("${code_quality_resources}/checkstyle.xml")
    toolVersion = "${check_style_version}"
    sourceSets = [ project.sourceSets.main ]
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = true
        html.enabled = true
        html.stylesheet resources.text.fromUri("${code_quality_resources}/checkstyle.xsl")
    }
}


// PMD Configuration
pmd {
    ignoreFailures = true
    toolVersion = "${pmd_version}"
    sourceSets = [ project.sourceSets.main ]
}


// Jacoco Configuration
jacoco {
    toolVersion = "${jacoco_version}"
    reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    executionData(file("${project.buildDir}/jacoco/test.exec"),
            file("${project.buildDir}/jacoco/integrationTest.exec"))

    reports {
        xml.enabled = true
        html.enabled = true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.37
            }
        }
    }
}

task verifyCoverage {
    dependsOn jacocoTestReport
    dependsOn jacocoTestCoverageVerification
}
